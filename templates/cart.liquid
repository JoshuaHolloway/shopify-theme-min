{% comment %} store.js.liquid snippet that contains VueX  {% endcomment %}
{% include 'store.js' %}

<div id="cart-page" class="cart-page container">
  <div class="cart-section">
    
    <div class="cart-table">
      


      <transition name="fade">
        
        <div v-show="!loading">



          <template 
            v-if="cart.items.length > 0"
          >

              <div class="cart-row"
                v-for="item in cart.items">
                <div class="cart-item-title" 
                  v-html="item.title">
                </div>

                <img 
                  :src="item.image">
                
                <div>
                  <div class="cart-item-price" 
                    v-html="item.formatted_line_price">
                  </div>
                  <label>
                    Qty
                    <input type="number" class="cart-item-qty" 
                      v-model="item.quantity"
                      @change="update_cart(item.variant_id, item.quantity)"
                    >
                  </label>
                </div>
                
                <div class="cart-item-remove" 
                  @click="remove_from_cart(item.id)">
                  <img src="{{ 'icon-trash.svg' | asset_url }}">
                </div>
              
              </div>

          </template>
          <template v-else>
            Your cart is currently empty
          </template>





        </div>
      
      </transition>



      
    </div>

    <div class="cart-sidebar">
      <div class="cart-sidebar-top">
        <h2>Your total</h2>

        <div class="cart-total"
          v-html="cart.total_price"
        ></div>
      </div>
      <a href="/checkout" class="checkout-btn">
        Checkout
      </a>
    </div>
  </div>


  <div class="cart-upsells"
    v-if="filtered_upsells.length > 0"
  >
    <h2>You might also like...</h2>
    
      <div class="cart-upsells-grid">

        <template 
          v-for="(upsell, idx) in filtered_upsells" 
        >
          <div class="cart-upsell-item" 
            v-if="idx < 4"
          >
            {% comment %} <div class="cart-upsell-title">{{ product.title }}</div> {% endcomment %}
            <div class="cart-upsell-title" 
              v-html="upsell.title">
            </div>

            {% comment %} <img class="cart-upsell-item-image" src="{{ product.featured_image | img_url: '400x', scale: 2 }}"> {% endcomment %}
            <img class="cart-upsell-item-image" 
              :src="upsell.image">



            <a class="cart-upsell-atc-btn  cart-upsell-atc-btn--adding"
              v-if="upsell.adding_upsell==true">
              Adding..
            </a>

            <a class="cart-upsell-atc-btn"
              v-else
              @click="add_to_cart(upsell.variant_id)"
            >
              Add to cart
            </a>



          </div>
        </template>

      </div>
  </div>
  
</div>


<script>
  const CartPageOptions = {

    // ==========================================

    name: 'Cart-App', // App Name

    // ==========================================
    
    store: store, // VueX store (/snippets/store.js.liquid)

    // ==========================================

    data() {
      return {

        // start-loading 0
        loading: true, // loading: boolean
        
        //cart: {
        //  items: [], // items: []
        //}, // cart: {}
        upsells: [ // this array will have store data filled in it when it first is sent to client upon page load
          {% for product in collections['shoes'].products %}
          
            {
              title:      "{{ product.title }}",
              handle:     "{{ product.handle }}",
              image:      "{{ product.featured_image | img_url: '400px', scale: 2 }}",
              product_id: "{{ product.id }}",
              variant_id: "{{ product.selected_or_first_available_variant.id }}",
              adding_upsell: false, // adding-upsell false 0
            },
          
          {% endfor %}
        ], // upsells: {}
      }; // return {}
    }, // data()

    // ==========================================

    // lifecycle hook:
    created() {
      //this.get_cart();

      // Instead of this.get_cart() we dispatch the action get_cart({commit}) from VueX store
      const promise = store.dispatch('get_cart');
      promise.then(() => {
        this.loading = false;
      });

      // -To syncrhonize the loading state, we need to use promises.
      // -Return a promise from the fetch request in actions.get_cart({commit).
      // -When promise resolves, set loading back to false.

    }, // created()
  
    // ==========================================

    // lifecycle hook
    beforeUpdate() {
      console.log('beforeUpdate() lifecycle method');
    }, // beforeUpdate()

    // ==========================================

    // lifecycle hook
    updated() {
      console.log('updated() lifecycle method');
    }, // updated()

    // ==========================================

    computed: {
      cart() {
        return store.state.cart; // This is where we bring in our VueX data
      }, // cart()

      filtered_upsells() {
        const upsells_not_in_cart = this.get_upsells_not_in_cart();
        return upsells_not_in_cart;
      }, // filtered_upsells()
    }, // computed: {}

    // ==========================================

    methods: {

      get_product_ids_in_cart() {
        //const products_in_cart = this.cart.items.map((item) => {
        const products_in_cart = store.state.cart.items.map((item) => {
          return item.product_id.toString();
        }); // .map()
        return products_in_cart;
      }, // get_product_ids_in_cart()

      // - - - - - - - - - - - - - - - - - - - - 

      get_upsells_not_in_cart() {
        const products_in_cart = this.get_product_ids_in_cart();
        const upsells_not_in_cart = this.upsells.filter(upsell => !products_in_cart.includes(upsell.product_id));
        return upsells_not_in_cart;
      }, // get_upsells_not_in_cart()

      // - - - - - - - - - - - - - - - - - - - - 

      //get_cart() moved into store.actions.get_cart({ commit })
      //get_cart() {
      //  fetch('/cart.js')
      //    .then(res => res.json())
      //    .then(cart => this.set_cart(cart))
      //    .catch(e => console.log(e));
      //}, // get_cart()

      // - - - - - - - - - - - - - - - - - - - - 

      //set_cart() is now done in store.mutations.SET_CART(state, cart)
      //set_cart(cart) {
      //  // update cart
      //  this.cart = cart;
      //  this.format_prices();
      //  this.loading = false; // end-loading 1
      //}, // set_cart()

      // - - - - - - - - - - - - - - - - - - - - 

      remove_from_cart(id) {
        this.loading = true; // start-loading 2

        //this.update_cart(id, 0);
        const qty = 0;
        const promise = store.dispatch('update_cart', {id, qty});
        promise.then(() => {
          this.loading = false;
        });
      }, // remove_from_cart()

      // - - - - - - - - - - - - - - - - - - - - 

      add_to_cart(id) {

        // on cart page add-to-cart button only for upsells
        const get_upsell = () => {
          const upsell = this.upsells.find(upsell => upsell.variant_id == id);
          return upsell;
        };

        const upsell = get_upsell();
        upsell.adding_upsell = true; // adding-upsell true 1
        this.loading = true; // start-loading 1
        
        //let formData = {
        //  'items': [{
        //    'id': id,
        //    'quantity': 1
        //  }]
        //};
        //
        //fetch('/cart/add.js', {
        //  method: 'POST',
        //  headers: {
        //    'Content-Type': 'application/json'
        //  },
        //  body: JSON.stringify(formData)
        //})
        //.then(response => response.json())
        //.then(obj => {
        //  const item = obj.items[0]; // only one item added
        //  console.log('ADD item: ', item);
        //
        //  // refresh cart data
        //  this.get_cart();
        //
        //  upsell.adding_upsell = false; // adding-upsell false 1
        //})
        //.catch(e => console.log(e));

        const promise = store.dispatch('add_to_cart', id);
        promise.then(() => {
          this.loading = false;
          upsell.adding_upsell = false; // adding-upsell false 1
        });

      }, // add_to_cart()

      // - - - - - - - - - - - - - - - - - - - - 

      // body of update_cart(id, qty) moved into store.actions.update_cart({ commit }, {id, qty})
      update_cart(id, qty) {
        // -this function is only used to update quantity.       
        // -since we decided to not change to loadin state upon update of quantity,
        //  we do not need to change the loading state upon resolution of promise.
        
        const promise = store.dispatch('update_cart', {id, qty});

      }, // update_cart() 

      // - - - - - - - - - - - - - - - - - - - - 

      //format_prices() body now done in store.mutations.SET_CART(state, cart)
      //format_prices() {
      //  this.cart.items.forEach(item => {
      //    // First time creates new property on items[idx]
      //    item.formatted_line_price = Shopify.formatMoney(item.line_price); 
      //  });
      //  this.cart.formatted_total_price = Shopify.formatMoney(this.cart.total_price);
      //}, // format_prices()

    }, // methods: {}

    // ==========================================

  }; // CartPageOptions = {}

  const CartPage = Vue.createApp(CartPageOptions);
  CartPage.mount('#cart-page');
  CartPage.use(store); // store defined in /snippets/store.js.liquid

</script>