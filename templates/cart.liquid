{% include 'store.js' %}

<div id="cart-page" class="cart-page container">
  <div class="cart-section">
    
    <div class="cart-table">
      
      <template 
        v-if="cart.items.length > 0"
      >

          <div class="cart-row"
            v-for="item in cart.items">
            <div class="cart-item-title" 
              v-html="item.title">
            </div>

            <img 
              :src="item.image">
            
            <div>
              <div class="cart-item-price" 
                v-html="item.formatted_line_price">
              </div>
              <label>
                Qty
                <input type="number" class="cart-item-qty" 
                  v-model="item.quantity"
                  @change="update_cart(item.variant_id, item.quantity)"
                >
              </label>
            </div>
            
            <div class="cart-item-remove" 
              @click="remove_from_cart(item.id)">
              <img src="{{ 'icon-trash.svg' | asset_url }}">
            </div>
          
          </div>

      </template>
      <template v-else>
        Your cart is currently empty
      </template>
      
    </div>

    <div class="cart-sidebar">
      <div class="cart-sidebar-top">
        <h2>Your total</h2>

        <div class="cart-total"
          v-html="cart.total_price"
        ></div>
      </div>
      <a href="/checkout" class="checkout-btn">
        Checkout
      </a>
    </div>
  </div>


  <div class="cart-upsells"
    v-if="upsells.length > 0"
  >
    <h2>You might also like...</h2>
    
      <div class="cart-upsells-grid">

        <template 
          v-for="(upsell, idx) in upsells" 
        >
          <div class="cart-upsell-item" 
            v-if="idx < 4"
          >
            {% comment %} <div class="cart-upsell-title">{{ product.title }}</div> {% endcomment %}
            <div class="cart-upsell-title" 
              v-html="upsell.title">
            </div>

            {% comment %} <img class="cart-upsell-item-image" src="{{ product.featured_image | img_url: '400x', scale: 2 }}"> {% endcomment %}
            <img class="cart-upsell-item-image" 
              :src="upsell.image">
            
            <a class="cart-upsell-atc-btn"
              @click="add_to_cart(upsell.variant_id)"
            >
              Add to cart
            </a>
          </div>
        </template>

      </div>
  </div>
  
</div>


<script>
  const CartPageOptions = {

    // ==========================================

    data() {
      return {
        cart: {
          items: [], // items: []
        }, // cart: {}
        upsells: [ // this array will have store data filled in it when it first is sent to client upon page load
          {% for product in collections['shoes'].products %}
          
            {
              title:      "{{ product.title }}",
              handle:     "{{ product.handle }}",
              image:      "{{ product.featured_image | img_url: '400px', scale: 2 }}",
              product_id: "{{ product.id }}",
              variant_id: "{{ product.selected_or_first_available_variant.id }}",
            },
          
          {% endfor %}
        ], // upsells: {}
      }; // return {}
    }, // data() {}

    // ==========================================

    // lifecycle hook:
    created() {
      this.get_cart();
    }, // created() {}
  
    // ==========================================

    // lifecycle hook
    beforeUpdate() {
      console.log('beforeUpdate() lifecycle method');
    }, // beforeUpdate() {}

    // ==========================================

    // lifecycle hook
    updated() {
      console.log('updated() lifecycle method');
    }, // updated() {}

    // ==========================================

    methods: {

      get_cart() {
        fetch('/cart.js')
          .then(res => res.json())
          .then(cart => this.set_cart(cart))
          .catch(e => console.log(e));
      }, // get_cart() {}

      // - - - - - - - - - - - - - - - - - - - - 

      set_cart(cart) {
        // update cart
        this.cart = cart;
        this.format_prices();
      }, // set_cart() {}

      // - - - - - - - - - - - - - - - - - - - - 

      remove_from_cart(id) {
        this.update_cart(id, 0);
      }, // remove_from_cart() {}

      // - - - - - - - - - - - - - - - - - - - - 

      add_to_cart(id) {

        let formData = {
          'items': [{
            'id': id,
            'quantity': 1
          }]
        };
    
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(obj => {
          const item = obj.items[0]; // only one item added
          console.log('ADD item: ', item);

          // refresh cart data
          this.get_cart();
        })
        .catch(e => console.log(e));

      }, // add_to_cart() {}

      // - - - - - - - - - - - - - - - - - - - - 

      remove_cart(id) {
        this.update_cart(id, 0);
      }, // remove_cart() {}

      // - - - - - - - - - - - - - - - - - - - - 

      update_cart(id, qty) {


        const data_obj = { "quantity": String(qty), "id": String(id) };

        fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data_obj)
        })
        .then(response => response.json())
        .then(cart     => this.set_cart(cart))
        .catch(error   => console.log('Error:', error));
      }, // update_cart() 

      // - - - - - - - - - - - - - - - - - - - - 

      format_prices() {
        this.cart.items.forEach(item => {
          // First time creates new property on items[idx]
          item.formatted_line_price = Shopify.formatMoney(item.line_price); 
        });

        this.cart.formatted_total_price = Shopify.formatMoney(this.cart.total_price);
      }, // format_prices() {}

    }, // methods: {}

    // ==========================================

  }; // CartPageOptions = {}

  const CartPage = Vue.createApp(CartPageOptions);
  CartPage.mount('#cart-page');

</script>